Description: >
    Carlos Rivas / Udacity 2019

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
    Ec2ImageId:
        Description: AMI value for the particular region
        Type: String
    SshKeyPairName:
        Description: SSH Public key name
        Type: String
    Ec2InstanceType:
        Description: EC2 machine instance type
        Type: String
    Ec2VolumeSize:
        Description: Volume size for instance
        Type: String
        Default: '30'
    Ec2DiskName:
        Description: Instance disk name
        Type: String
Resources:
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  OutboundRule:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - WebServerSecGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - LBSecGroup
          - GroupId

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId:
        Fn::GetAtt:
          - LBSecGroup
          - GroupId
      GroupId:
        Fn::GetAtt:
          - WebServerSecGroup
          - GroupId
  RoleForSSMAccess:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
#  RoleForS3Access:
#    Type: "AWS::IAM::Role"
#    Properties:
#      Path: /
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - ec2.amazonaws.com
#            Action:
#              - 'sts:AssumeRole'
#      ManagedPolicyArns:
#        - arn:aws:iam::aws:policy/AmazonS3FullAccess
  # Instance Profile
  ServerInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Roles:
        - !Ref RoleForSSMAccess

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 awscli -y
          systemctl start apache2.service
          cd /var/www/html
                       
          echo "it works! Udagram, Udacity!" > index.html
      ImageId: !Ref Ec2ImageId
#      KeyName: !Ref SshKeyPairName
      SecurityGroups:
      - Ref: WebServerSecGroup
      InstanceType: !Ref Ec2InstanceType
      IamInstanceProfile: !Ref ServerInstanceProfile
      BlockDeviceMappings:
      - DeviceName: !Ref Ec2DiskName
        Ebs:
          VolumeSize: !Ref Ec2VolumeSize
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub ${EnvironmentName}-PRIV-NET
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Fn::Join:
          - "-"
          - - george
            - !Sub ${EnvironmentName}-UdacityLB
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: ${EnvironmentName}-VPCID

Outputs:
  LBDNSName:
    Description: DNS name of the load balancer
    Value:
      Fn::Join:
       - "//"
       - - "http:"
         - !GetAtt WebAppLB.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-LBURL